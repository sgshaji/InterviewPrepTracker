Explanation

Understanding the problem
This error message indicates that a resource (like a script, stylesheet, or image) from a different origin is being blocked from loading. This happens because the browser is enforcing cross-origin policies, specifically related to the Cross-Origin-Embedder-Policy (COEP) and Cross-Origin-Opener-Policy (COOP) headers [1, 3].

The NotSameOriginAfterDefaultedToSameOriginByCoep part of the error means that the browser, due to the Cross-Origin-Embedder-Policy being set to a value like require-corp or same-origin, is defaulting the origin of the current document to same-origin. As a result, it's blocking the resource that is from a different origin because it violates this policy.

Suggested fix
To fix this issue, you have a few options:

Ensure the resource is served with appropriate CORS headers: The server providing the cross-origin resource needs to include CORS headers that allow your origin to access it. This is the most secure approach as it maintains cross-origin isolation.
Update your server's Cross-Origin-Embedder-Policy and Cross-Origin-Opener-Policy headers: If you control both the embedding page and the resource being embedded, you can adjust the COEP and COOP headers on your server to allow the cross-origin access. For example, you might set COEP to credentialless or COOP to unsafe-none.
Consider if you truly need to load the resource cross-origin: If possible, serve the resource from the same origin as your embedding page.
If using Helmet.js, adjust or disable default policies: If you are using the Helmet.js middleware in Node.js, it sets default security headers which might be causing this issue. You may need to configure Helmet to relax the crossOriginEmbedderPolicy or crossOriginOpenerPolicy settings if cross-origin resource loading is intended [1].
Summary
The ERR_BLOCKED_BY_RESPONSE.NotSameOriginAfterDefaultedToSameOriginByCoep error occurs when a cross-origin resource is blocked due to strict cross-origin policies enforced by the browser (COEP). The fix involves ensuring the resource is served with appropriate CORS headers, adjusting COEP/COOP headers on your server, or considering if cross-origin loading is necessary. If using Helmet.js, its default settings might need adjustment.

Sources and related content
Data used to understand this message